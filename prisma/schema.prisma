// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int      @id @default(autoincrement())
  email     String   @unique
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Relations
  profile     Profile?
  quizzes     Quiz[]
  voiceRecords VoiceRecord[]
  achievements Achievement[]
  badges       Badge[]
}

model Quiz {
  id        Int      @id @default(autoincrement())
  question  String
  answer    String
  userId    Int
  user      User     @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())
  // New fields for real quiz data
  category   String
  difficulty String
  language   String
  options    String[]
  type       String
  points     Int
  audioUrl   String?
  // Accuracy tracking
  correctAnswers Int   @default(0)
  totalAnswers   Int   @default(0)
}

model VoiceRecord {
  id        Int      @id @default(autoincrement())
  url       String   // Supabase Storage file URL
  userId    Int
  user      User     @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())
}

model Achievement {
  id         Int      @id @default(autoincrement())
  title      String
  userId     Int
  user       User     @relation(fields: [userId], references: [id])
  achievedAt DateTime @default(now())
}

model Profile {
  id        Int      @id @default(autoincrement())
  phone     String?
  location  String?
  languages String[]
  age       Int?
  education String?
  interests String[]
  goals     String?
  expertise String?
  experience String?
  bio       String?
  availability String?
  avatarUrl String?
  userId    Int     @unique
  user      User    @relation(fields: [userId], references: [id])
}

model Badge {
  id          Int      @id @default(autoincrement())
  userId      Int
  user        User     @relation(fields: [userId], references: [id])
  name        String
  description String
  icon        String
  color       String
  type        String   // 'quiz', 'level', 'streak', 'category', 'accuracy'
  earnedAt    DateTime @default(now())
  metadata    Json?    // Store additional data like score, category, etc.
}
